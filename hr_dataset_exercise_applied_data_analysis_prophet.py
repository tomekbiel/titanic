# -*- coding: utf-8 -*-
"""hr_dataset_exercise_applied_data_analysis_prophet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xvT0V-fR5KQPaf8yC9TGjOVf0enY4wWv

<h1>Exercise Applied Data Analysis

Using the HR Dataset, answer the following questions

* Which departments are topping the list of employees?
*   What is the distribution of our employees by age band?
* What is the diversity of our employee base by ethnicity and gender?
* What is the average age of employees?
* Which department has the highest and lowest average age?
* Whatâ€™s the tenure?
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

hr = pd.read_csv('human_resources.csv')

(hr['Age']//5*5).map(lambda x: str(x).replace('.0','') + '-' + str(x+4).replace('.0','') )

hr

hr.columns

hr.groupby('Department')['Id'].count().reset_index().sort_values(by='Id').tail(1)

hr.groupby('Age (bin)')['Id'].count().reset_index()

sns.barplot(data=hr.groupby('Age (bin)')['Id'].count().reset_index(),
             x='Age (bin)',
             y='Id',
            color='blue')

sns.histplot(data=hr.sort_values(by='Age (bin)'),
             x='Age (bin)')

hr.groupby(['Race', 'Gender'])['Id'].count()

hr.groupby([ 'Gender', 'Race'])['Id'].count()

hr.groupby(['Race', 'Gender'])['Id'].count().reset_index()

plt.figure(figsize=(20,8))
sns.barplot(data=hr.groupby(['Race', 'Gender'])['Id'].count().reset_index(),
            x='Race',
            y='Id',
            hue='Gender')
plt.ylabel("Number of Employees")

hr['Age'].mean()

hr.groupby(['Department'])['Age'].mean().reset_index().sort_values(by='Age').tail(1)

hr.groupby(['Department'])['Age'].mean().reset_index().sort_values(by='Age').head(1)

sns.barplot(data=hr.groupby('Tenure')['Id'].count().reset_index().sort_values('Id'),
            x='Tenure',
            y='Id',
            color='blue')

hr['Tenure'].value_counts()

hr['Hire Date'].agg(['min','max'])

hr['% terminated'].value_counts()

hr[['Hire Date','Termdate']]

hr

hr['Termdate'].dropna().count() / len(hr['Termdate'])

hr['Termdate (group)']

hr[hr['Termdate (group)']=='Active']['Termdate'].dropna()

hr.groupby('Termdate')['Id'].count().reset_index()

hr['Hire Date'] = hr['Hire Date'].map(lambda x: datetime.datetime(int(x.split('/')[2].split(' ')[0]),int(x.split('/')[1]),int(x.split('/')[0])))

hr['Hire Year'] = hr['Hire Date'].map(lambda x: x.year)
hr['Hire Month'] = hr['Hire Date'].map(lambda x: x.month)

plt.figure(figsize=(16,8))
sns.lineplot(data = hr.groupby(['Hire Month','Hire Year'])['Id'].count().reset_index(),
             x = 'Hire Month',
             y = 'Id',
             style = 'Hire Year',
             hue = 'Hire Year',
             marker='o')

from prophet import Prophet

data=hr.groupby('Hire Date')['Id'].count().reset_index().rename(columns={'Hire Date':'ds',
                                                                         'Id':'y'})

m = Prophet()
m.fit(data)

future = m.make_future_dataframe(periods=365)
future.tail()

forecast = m.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']]

from prophet.plot import plot_plotly, plot_components_plotly

plot_plotly(m, forecast)

fig2 = m.plot_components(forecast)

